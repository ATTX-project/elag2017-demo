apply plugin: 'java'
apply plugin: 'com.chrisgahlert.gradle-dcompose-plugin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.DockerWaitContainer

repositories {
    mavenCentral()
    maven { url "${artifactRepoURL}/repository/attx-releases"}
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

dependencies {
    testCompile \
        'junit:junit:4.10',
        'info.cukes:cucumber-java8:1.2.5',
        'info.cukes:cucumber-junit:1.2.5',
        'com.mashape.unirest:unirest-java:1.4.9',
        'org.skyscreamer:jsonassert:1.4.0',
        'org.awaitility:awaitility-groovy:2.0.0',
        'org.uh.hulib.attx.dev:dev-test-helper:1.4'
}


ext.src = [
    "${artifactRepoURL}/restServices/archivaServices/searchService/artifact?g=org.uh.hulib.attx.wc&a=uv-dpu-t-attx-metadata&v=${attxMetadataPlugin}&p=jar":"uv-dpu-t-attx-metadata-${attxMetadataPlugin}.jar"
]

import de.undercouch.gradle.tasks.download.Download
task downloadMETADPUFile

for (s in src) {
    task "downloadMETADPUFile_${s.key.hashCode()}"(type: Download) {
        src s.key
        dest new File("$projectDir", s.value)
    }
    downloadMETADPUFile.dependsOn("downloadMETADPUFile_${s.key.hashCode()}")
}

if (!project.hasProperty("testEnv") || project.testEnv == "dev") {
    ext.testSet = "localhost"
} else if (project.testEnv == "CI"){
    ext.testSet = "container"
} else {
    throw new GradleException("Build project environment option not recognised.")
}

// These parameters should be set before the tests are run,
// if there different combinations need to be tested

ext {
    testImageUVProv = "latest"
    testImageGM = "latest"
    testImageFuseki = "latest"
    testImageES5 = "latest"
    testImageESSiren = "latest"
}


dcompose {
    createComposeFile.useTags = true
    registry ("$registryURL") {
        // no user/pass
    }
    networks {
        pdTest
    }
    shared {
        forcePull = true
        forceRemoveImage = true
        image = "attxproject/unified-views-shared:stable-1.2"
        networks = [pdTest]
    }

    mysql {
        forcePull = true
        forceRemoveImage = true
        image = 'attxproject/unified-views-mariadb:stable-1.2'
        env = ['MYSQL_ROOT_PASSWORD=iamroot!']
        networks = [pdTest]
        hostName = 'mysql'
        if (testSet == "localhost") {
            portBindings = ['3306:3306']
        }
    }
    backend {
        forcePull = true
        forceRemoveImage = true
        image = 'attxproject/unified-views-backend:stable-1.2'
        volumesFrom =  [shared]
        dependsOn = [mysql, shared]
        networks = [pdTest]
    }

    frontend {
        forcePull = true
        forceRemoveImage = true
        image = 'attxproject/unified-views-frontend:stable-1.2'
        volumesFrom = [shared]
        dependsOn = [backend, shared]
        networks = [pdTest]
        hostName = 'frontend'
        if (testSet == "localhost") {
            portBindings = ['8080:8080']
        }
    }

    attxdpus {
        forceRemoveImage = true
        image = "attxproject/uv-attx-dpus:elag2017"
        links = [frontend.link(), mysql.link(), backend.link()]
        dependsOn = [mysql, backend, frontend]
        networks = [pdTest]
    }

    fuseki {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/attx-fuseki:${testImageFuseki}"
        networks = [pdTest]
        hostName = 'fuseki'
        if (testSet == "localhost") {
            portBindings = ['3030:3030']
        }
        env = ['ADMIN_PASSWORD=pw123']
    }

    essiren {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/essiren:${testImageESSiren}"
        networks = [pdTest]
        hostName = 'essiren'
        if (testSet == "localhost") {
            portBindings = ['9200:9200', '9300:9300']
        }
    }

    es5 {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/attx-es5:${testImageES5}"
        networks = [pdTest]
        hostName = 'es5'
        if (testSet == "localhost") {
            portBindings = ['9210:9210', '9310:9310']
        }
    }

    uvprov {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/uv-prov:${testImageUVProv}"
        dependsOn = [mysql]
        networks = [pdTest]
        hostName = 'uvprov'
        if (testSet == "localhost") {
            portBindings = ['4301:4301']
        }
    }

    gmapi {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/gm-api:${testImageGM}"
        dependsOn = [frontend, backend, shared, attxdpus, mysql, uvprov, essiren, fuseki, es5]
        networks = [pdTest]
        hostName = 'gmapi'
        if (testSet == "localhost") {
            portBindings = ['4302:4302']
        }
    }


    demodata {
      image = "elag-demodata"

      networks = [pdTest]
    }

    pipelines {
      image = "elag-pipelines"

      links = [frontend.link(), mysql.link(), backend.link()]
      dependsOn = [mysql, backend, frontend]
      networks = [pdTest]
    }
}



task checkDPUDone(type: DockerWaitContainer) {
    dependsOn startGmapiContainer
    targetContainerId {dcompose.attxdpus.containerId}
    doLast{
        if(getExitCode() != 0) {
            println "ATTX DPU Container failed with exit code \${getExitCode()}"
        } else {
            println "Everything is peachy."
        }
    }
}

startPipelinesContainer.dependsOn checkDPUDone
